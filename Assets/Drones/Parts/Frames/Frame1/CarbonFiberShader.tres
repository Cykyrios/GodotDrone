[gd_resource type="VisualShader" load_steps=40 format=2]

[sub_resource type="VisualShaderNodeFloatConstant" id=1]
constant = 1.0

[sub_resource type="VisualShaderNodeFloatOp" id=2]
operator = 2

[sub_resource type="VisualShaderNodeFloatOp" id=3]
operator = 2

[sub_resource type="VisualShaderNodeFloatConstant" id=4]
constant = 3.14159

[sub_resource type="VisualShaderNodeFloatFunc" id=5]
function = 0

[sub_resource type="VisualShaderNodeFloatFunc" id=6]
function = 16

[sub_resource type="VisualShaderNodeIf" id=7]
output_port_for_preview = 0

[sub_resource type="VisualShaderNodeFloatOp" id=8]
operator = 2

[sub_resource type="VisualShaderNodeFloatOp" id=9]
operator = 3

[sub_resource type="VisualShaderNodeFloatFunc" id=10]
function = 14

[sub_resource type="VisualShaderNodeInput" id=11]
output_port_for_preview = 0
input_name = "uv"

[sub_resource type="VisualShaderNodeFloatOp" id=12]
operator = 2

[sub_resource type="VisualShaderNodeFloatOp" id=13]
operator = 2

[sub_resource type="VisualShaderNodeFloatFunc" id=14]
function = 0

[sub_resource type="VisualShaderNodeFloatFunc" id=15]
function = 16

[sub_resource type="VisualShaderNodeVectorOp" id=16]
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 4, 4, 4 ) ]
operator = 2

[sub_resource type="VisualShaderNodeVectorOp" id=17]
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 1, 1, 1 ) ]
operator = 4

[sub_resource type="VisualShaderNodeVectorDecompose" id=18]

[sub_resource type="VisualShaderNodeVectorCompose" id=19]

[sub_resource type="VisualShaderNodeVectorCompose" id=20]

[sub_resource type="VisualShaderNodeVectorDecompose" id=21]

[sub_resource type="VisualShaderNodeVectorDecompose" id=22]

[sub_resource type="VisualShaderNodeFloatOp" id=23]
default_input_values = [ 0, 0.0, 1, 2.0 ]
operator = 2

[sub_resource type="VisualShaderNodeFloatOp" id=24]
default_input_values = [ 0, 0.0, 1, 1.0 ]
operator = 1

[sub_resource type="VisualShaderNodeFloatOp" id=25]
default_input_values = [ 0, 0.0, 1, 2.0 ]
operator = 5

[sub_resource type="VisualShaderNodeFloatFunc" id=26]
function = 31

[sub_resource type="VisualShaderNodeFloatOp" id=27]
default_input_values = [ 0, 0.0, 1, 2.0 ]
operator = 2

[sub_resource type="VisualShaderNodeFloatOp" id=28]
default_input_values = [ 0, 0.0, 1, 1.0 ]
operator = 1

[sub_resource type="VisualShaderNodeFloatOp" id=29]
default_input_values = [ 0, 0.0, 1, 2.0 ]
operator = 5

[sub_resource type="VisualShaderNodeFloatFunc" id=30]
function = 31

[sub_resource type="VisualShaderNodeIf" id=31]
output_port_for_preview = 0

[sub_resource type="VisualShaderNodeVectorDecompose" id=32]
output_port_for_preview = 0

[sub_resource type="VisualShaderNodeVectorCompose" id=33]

[sub_resource type="VisualShaderNodeFloatOp" id=34]
output_port_for_preview = 0
operator = 2

[sub_resource type="VisualShaderNodeVectorCompose" id=35]

[sub_resource type="VisualShaderNodeFloatOp" id=36]
operator = 2

[sub_resource type="VisualShaderNodeFloatOp" id=37]
operator = 3

[sub_resource type="VisualShaderNodeFloatFunc" id=38]
function = 14

[sub_resource type="VisualShaderNodeFloatConstant" id=39]
constant = 4.0

[resource]
code = "shader_type spatial;



void vertex() {
// Output:0

}

void fragment() {
// Input:2
	vec3 n_out2p0;
	n_out2p0 = vec3(UV,0.0);

// VectorDecompose:3
	float n_out3p0;
	float n_out3p1;
	float n_out3p2;
	n_out3p0 = n_out2p0.x;
	n_out3p1 = n_out2p0.y;
	n_out3p2 = n_out2p0.z;

// Scalar:9
	float n_out9p0;
	n_out9p0 = 4.000000;

// ScalarOp:6
	float n_out6p0;
	n_out6p0 = n_out3p0 * n_out9p0;

// ScalarFunc:8
	float n_out8p0;
	n_out8p0 = floor(n_out6p0);

// ScalarOp:7
	float n_out7p0;
	n_out7p0 = n_out8p0 / n_out9p0;

// Scalar:13
	float n_out13p0;
	n_out13p0 = 3.141590;

// ScalarOp:12
	float n_out12p0;
	n_out12p0 = n_out9p0 * n_out13p0;

// ScalarOp:11
	float n_out11p0;
	n_out11p0 = n_out7p0 * n_out12p0;

// ScalarFunc:14
	float n_out14p0;
	n_out14p0 = sin(n_out11p0);

// ScalarFunc:15
	float n_out15p0;
	n_out15p0 = ceil(n_out14p0);

// ScalarOp:17
	float n_out17p0;
	n_out17p0 = n_out3p1 * n_out9p0;

// ScalarFunc:19
	float n_out19p0;
	n_out19p0 = floor(n_out17p0);

// ScalarOp:18
	float n_out18p0;
	n_out18p0 = n_out19p0 / n_out9p0;

// ScalarOp:21
	float n_out21p0;
	n_out21p0 = n_out9p0 * n_out13p0;

// ScalarOp:20
	float n_out20p0;
	n_out20p0 = n_out18p0 * n_out21p0;

// ScalarFunc:22
	float n_out22p0;
	n_out22p0 = sin(n_out20p0);

// ScalarFunc:23
	float n_out23p0;
	n_out23p0 = ceil(n_out22p0);

// VectorOp:24
	vec3 n_out24p0;
	n_out24p0 = n_out2p0 * vec3(n_out9p0);

// Scalar:10
	float n_out10p0;
	n_out10p0 = 1.000000;

// VectorOp:25
	vec3 n_out25p0;
	n_out25p0 = mod( n_out24p0 , vec3(n_out10p0) );

// VectorDecompose:26
	float n_out26p0;
	float n_out26p1;
	float n_out26p2;
	n_out26p0 = n_out25p0.x;
	n_out26p1 = n_out25p0.y;
	n_out26p2 = n_out25p0.z;

// VectorCompose:27
	float n_in27p2 = 0.00000;
	vec3 n_out27p0;
	n_out27p0 = vec3( n_out26p0 , n_out26p1 , n_in27p2 );

// VectorCompose:28
	float n_in28p2 = 0.00000;
	vec3 n_out28p0;
	n_out28p0 = vec3( n_out26p1 , n_out26p0 , n_in28p2 );

// If:16
	float n_in16p2 = 0.00001;
	vec3 n_out16p0;
	if(abs(n_out15p0-n_out23p0)<n_in16p2)
	{
		n_out16p0=n_out27p0;
	}
	else if(n_out15p0<n_out23p0)
	{
		n_out16p0=n_out28p0;
	}
	else
	{
		n_out16p0=n_out28p0;
	}

// VectorDecompose:29
	float n_out29p0;
	float n_out29p1;
	float n_out29p2;
	n_out29p0 = n_out2p0.x;
	n_out29p1 = n_out2p0.y;
	n_out29p2 = n_out2p0.z;

// ScalarOp:30
	float n_in30p1 = 2.00000;
	float n_out30p0;
	n_out30p0 = n_out29p0 * n_in30p1;

// ScalarOp:31
	float n_in31p1 = 1.00000;
	float n_out31p0;
	n_out31p0 = n_out30p0 - n_in31p1;

// ScalarOp:32
	float n_in32p1 = 2.00000;
	float n_out32p0;
	n_out32p0 = pow( n_out31p0 , n_in32p1 );

// ScalarFunc:33
	float n_out33p0;
	n_out33p0 = 1.0-n_out32p0;

// ScalarOp:34
	float n_in34p1 = 2.00000;
	float n_out34p0;
	n_out34p0 = n_out29p1 * n_in34p1;

// ScalarOp:35
	float n_in35p1 = 1.00000;
	float n_out35p0;
	n_out35p0 = n_out34p0 - n_in35p1;

// ScalarOp:36
	float n_in36p1 = 2.00000;
	float n_out36p0;
	n_out36p0 = pow( n_out35p0 , n_in36p1 );

// ScalarFunc:37
	float n_out37p0;
	n_out37p0 = 1.0-n_out36p0;

// If:38
	float n_in38p2 = 0.00001;
	vec3 n_out38p0;
	if(abs(n_out15p0-n_out23p0)<n_in38p2)
	{
		n_out38p0=vec3(n_out33p0);
	}
	else if(n_out15p0<n_out23p0)
	{
		n_out38p0=vec3(n_out37p0);
	}
	else
	{
		n_out38p0=vec3(n_out37p0);
	}

// Output:0
	ALBEDO = n_out16p0;
	NORMAL_MAP = n_out38p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -1152, 354 )
nodes/fragment/2/node = SubResource( 11 )
nodes/fragment/2/position = Vector2( -2200, 200 )
nodes/fragment/3/node = SubResource( 22 )
nodes/fragment/3/position = Vector2( -2000, 200 )
nodes/fragment/4/node = SubResource( 33 )
nodes/fragment/4/position = Vector2( -400, 80 )
nodes/fragment/5/node = SubResource( 35 )
nodes/fragment/5/position = Vector2( -400, 200 )
nodes/fragment/6/node = SubResource( 36 )
nodes/fragment/6/position = Vector2( -1780, 80 )
nodes/fragment/7/node = SubResource( 37 )
nodes/fragment/7/position = Vector2( -1440, 80 )
nodes/fragment/8/node = SubResource( 38 )
nodes/fragment/8/position = Vector2( -1620, 80 )
nodes/fragment/9/node = SubResource( 39 )
nodes/fragment/9/position = Vector2( -2200, 400 )
nodes/fragment/10/node = SubResource( 1 )
nodes/fragment/10/position = Vector2( -2200, 480 )
nodes/fragment/11/node = SubResource( 2 )
nodes/fragment/11/position = Vector2( -1280, 80 )
nodes/fragment/12/node = SubResource( 3 )
nodes/fragment/12/position = Vector2( -1440, 200 )
nodes/fragment/13/node = SubResource( 4 )
nodes/fragment/13/position = Vector2( -1720, 260 )
nodes/fragment/14/node = SubResource( 5 )
nodes/fragment/14/position = Vector2( -1120, 80 )
nodes/fragment/15/node = SubResource( 6 )
nodes/fragment/15/position = Vector2( -940, 80 )
nodes/fragment/16/node = SubResource( 7 )
nodes/fragment/16/position = Vector2( -740, 180 )
nodes/fragment/17/node = SubResource( 8 )
nodes/fragment/17/position = Vector2( -1780, 340 )
nodes/fragment/18/node = SubResource( 9 )
nodes/fragment/18/position = Vector2( -1440, 340 )
nodes/fragment/19/node = SubResource( 10 )
nodes/fragment/19/position = Vector2( -1620, 340 )
nodes/fragment/20/node = SubResource( 12 )
nodes/fragment/20/position = Vector2( -1280, 340 )
nodes/fragment/21/node = SubResource( 13 )
nodes/fragment/21/position = Vector2( -1440, 460 )
nodes/fragment/22/node = SubResource( 14 )
nodes/fragment/22/position = Vector2( -1120, 340 )
nodes/fragment/23/node = SubResource( 15 )
nodes/fragment/23/position = Vector2( -940, 340 )
nodes/fragment/24/node = SubResource( 16 )
nodes/fragment/24/position = Vector2( -1900, 660 )
nodes/fragment/25/node = SubResource( 17 )
nodes/fragment/25/position = Vector2( -1720, 660 )
nodes/fragment/26/node = SubResource( 18 )
nodes/fragment/26/position = Vector2( -1540, 660 )
nodes/fragment/27/node = SubResource( 19 )
nodes/fragment/27/position = Vector2( -1320, 600 )
nodes/fragment/28/node = SubResource( 20 )
nodes/fragment/28/position = Vector2( -1320, 720 )
nodes/fragment/29/node = SubResource( 21 )
nodes/fragment/29/position = Vector2( -1900, 860 )
nodes/fragment/30/node = SubResource( 23 )
nodes/fragment/30/position = Vector2( -1680, 860 )
nodes/fragment/31/node = SubResource( 24 )
nodes/fragment/31/position = Vector2( -1500, 860 )
nodes/fragment/32/node = SubResource( 25 )
nodes/fragment/32/position = Vector2( -1320, 860 )
nodes/fragment/33/node = SubResource( 26 )
nodes/fragment/33/position = Vector2( -1140, 860 )
nodes/fragment/34/node = SubResource( 27 )
nodes/fragment/34/position = Vector2( -1680, 1000 )
nodes/fragment/35/node = SubResource( 28 )
nodes/fragment/35/position = Vector2( -1500, 1000 )
nodes/fragment/36/node = SubResource( 29 )
nodes/fragment/36/position = Vector2( -1320, 1000 )
nodes/fragment/37/node = SubResource( 30 )
nodes/fragment/37/position = Vector2( -1140, 1000 )
nodes/fragment/38/node = SubResource( 31 )
nodes/fragment/38/position = Vector2( -740, 480 )
nodes/fragment/39/node = SubResource( 32 )
nodes/fragment/39/position = Vector2( -400, 400 )
nodes/fragment/40/node = SubResource( 34 )
nodes/fragment/40/position = Vector2( -146, 545 )
nodes/fragment/connections = PackedInt32Array( 2, 0, 3, 0, 3, 0, 4, 0, 3, 1, 4, 1, 3, 0, 5, 1, 3, 1, 5, 0, 3, 0, 6, 0, 9, 0, 6, 1, 6, 0, 8, 0, 8, 0, 7, 0, 9, 0, 7, 1, 7, 0, 11, 0, 9, 0, 12, 0, 13, 0, 12, 1, 12, 0, 11, 1, 11, 0, 14, 0, 17, 0, 19, 0, 19, 0, 18, 0, 18, 0, 20, 0, 21, 0, 20, 1, 20, 0, 22, 0, 22, 0, 23, 0, 3, 1, 17, 0, 13, 0, 21, 1, 23, 0, 16, 1, 2, 0, 24, 0, 24, 0, 25, 0, 9, 0, 24, 1, 25, 0, 26, 0, 26, 0, 27, 0, 26, 0, 28, 1, 26, 1, 27, 1, 26, 1, 28, 0, 27, 0, 16, 3, 28, 0, 16, 4, 28, 0, 16, 5, 9, 0, 17, 1, 9, 0, 18, 1, 9, 0, 21, 0, 10, 0, 25, 1, 15, 0, 16, 0, 14, 0, 15, 0, 2, 0, 29, 0, 29, 0, 30, 0, 30, 0, 31, 0, 31, 0, 32, 0, 32, 0, 33, 0, 34, 0, 35, 0, 35, 0, 36, 0, 36, 0, 37, 0, 29, 1, 34, 0, 15, 0, 38, 0, 23, 0, 38, 1, 33, 0, 38, 3, 37, 0, 38, 4, 37, 0, 38, 5, 38, 0, 0, 8, 16, 0, 0, 0, 16, 0, 39, 0, 33, 0, 40, 1, 39, 0, 40, 0 )
