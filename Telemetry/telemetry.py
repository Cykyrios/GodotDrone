# -*- coding: utf-8 -*-
"""

"""

import matplotlib.pyplot as plt, pandas as pd

data = pd.read_csv("~/.local/share/godot/app_userdata/Drone/telemetry.csv", delimiter=",")


def setup_plot():
    ax = plt.gca()
    ax.set_xlabel("time (s)")
    ax.legend()
    ax.minorticks_on()
    ax.grid(which="major")
    ax.grid(which="minor", alpha=0.2)
    
    ax.set_zorder(10)
    ax.patch.set_alpha(0)


figure_size = [10, 6]

x_limits = [0, None]
y_limits = [None, None]


fig = plt.figure("Input", figsize=figure_size)
ax = plt.gca()
ax.plot(data["t"], data["input.power"], color="gold", label="Power")
ax.plot(data["t"], data["input.pitch"], color="red", label="Pitch")
ax.plot(data["t"], data["input.yaw"], color="green", label="Yaw")
ax.plot(data["t"], data["input.roll"], color="blue", label="Roll")
ax.set_xlim(x_limits)
ax.set_ylim(ymin=-1.05, ymax=1.05)
ax.set_ylabel("Input")
ax.set_title("Input vs Time")
setup_plot()


plt.figure("Position", figsize=figure_size)
ax = plt.gca()
ax.plot(data["t"], data["x"], color="red", label="X")
ax.plot(data["t"], data["y"], color="green", label="Y")
ax.plot(data["t"], data["z"], color="blue", label="Z")
ax.set_xlim(x_limits)
ax.set_ylim(y_limits)
ax.set_ylabel("Position (m)")
ax.set_title("Position vs Time")
setup_plot()


plt.figure("Velocity", figsize=figure_size)
ax = plt.gca()
ax.plot(data["t"], data["vx"], color="red", label="X")
ax.plot(data["t"], data["vy"], color="green", label="Y")
ax.plot(data["t"], data["vz"], color="blue", label="Z")
ax.set_xlim(x_limits)
ax.set_ylim(y_limits)
ax.set_ylabel("Speed (m/s)")
ax.set_title("Velocity vs Time")
setup_plot()


plt.figure("Angles", figsize=figure_size)
ax = plt.gca()
ax.plot(data["t"], data["pitch"], color="red", label="Pitch")
ax.plot(data["t"], data["yaw"], color="green", label="Yaw")
ax.plot(data["t"], data["roll"], color="blue", label="Roll")
ax.set_xlim(x_limits)
ax.set_ylim(y_limits)
ax.set_ylabel("Angle (rad)")
ax.set_title("Angles vs Time")
setup_plot()


plt.figure("Angular Velocity", figsize=figure_size)
ax = plt.gca()
ax.plot(data["t"], data["pitch_speed"], color="red", label="Pitch")
ax.plot(data["t"], data["yaw_speed"], color="green", label="Yaw")
ax.plot(data["t"], data["roll_speed"], color="blue", label="Roll")
ax.set_xlim(x_limits)
ax.set_ylim(y_limits)
ax.set_ylabel("Angular velocity (rad/s)")
ax.set_title("Angular Velocity vs Time")
setup_plot()


plt.figure("Propeller RPM", figsize=figure_size)
ax = plt.gca()
ax.plot(data["t"], data["rpm1"], color="red", label="Propeller 1")
ax.plot(data["t"], data["rpm2"], color="green", label="Propeller 2")
ax.plot(data["t"], data["rpm3"], color="blue", label="Propeller 3")
ax.plot(data["t"], data["rpm4"], color="gold", label="Propeller 4")
ax.set_xlim(x_limits)
ax.set_ylim(y_limits)
ax.set_ylabel("Propeller speed (RPM)")
ax.set_title("Propeller Speed vs Time")
setup_plot()


plt.figure("Propeller Thrust", figsize=figure_size)
ax = plt.gca()
ax.plot(data["t"], data["thrust1"], color="red", label="Propeller 1")
ax.plot(data["t"], data["thrust2"], color="green", label="Propeller 2")
ax.plot(data["t"], data["thrust3"], color="blue", label="Propeller 3")
ax.plot(data["t"], data["thrust4"], color="gold", label="Propeller 4")
ax.set_xlim(x_limits)
ax.set_ylim(y_limits)
ax.set_ylabel("Propeller thrust (N)")
ax.set_title("Propeller Thrust vs Time")
setup_plot()


# plt.figure("PID Propellers", figsize=figure_size)
# ax = plt.subplot(221)
# ax.plot(data["t"], data["pid.prop1.tgt"], color="red", label="Prop 1 Target")
# ax.plot(data["t"], data["thrust1"], color="green", label="Prop 1 Thrust")
# ax = plt.subplot(222)
# ax.plot(data["t"], data["pid.prop2.tgt"], color="red", label="Prop 2 Target")
# ax.plot(data["t"], data["thrust2"], color="green", label="Prop 2 Thrust")
# ax = plt.subplot(223)
# ax.plot(data["t"], data["pid.prop3.tgt"], color="red", label="Prop 3 Target")
# ax.plot(data["t"], data["thrust3"], color="green", label="Prop 3 Thrust")
# ax = plt.subplot(224)
# ax.plot(data["t"], data["pid.prop4.tgt"], color="red", label="Prop 4 Target")
# ax.plot(data["t"], data["thrust4"], color="green", label="Prop 4 Thrust")
# ax.set_xlim(x_limits)
# ax.set_ylim(y_limits)
# ax.set_ylabel("Propeller Thrust (N)")
# ax.set_title("Propeller Thrust PID vs Time")
# setup_plot()


#plt.figure("PID Altitude", figsize=figure_size)
#ax = plt.gca()
#p1, = ax.plot(data["t"], data["pid.alt.tgt"], color="red", label="Target")
#p2, = ax.plot(data["t"], data["y"], color="green", label="Altitude")
#ax.set_xlim(x_limits)
#ax.set_ylim(y_limits)
#ax.set_ylabel("Altitude (m)")
#ax.set_title("Altitude PID vs Time")
#ax2 = ax.twinx()
#p3, = ax2.plot(data["t"], data["pid.alt.err"], color="blue", label="Error")
#ax3 = ax.twinx()
#p4, = ax3.plot(data["t"], data["pid.alt.out"], color="gold", label="Raw Output")
#p5, = ax3.plot(data["t"], data["pid.alt.clamp"], color="brown", label="Clamped Output")
#ax3.spines["right"].set_position(("axes", 1.1))
#plt.sca(ax)
#setup_plot()
#lines = [p1, p2, p3, p4, p5]
#ax.legend(lines, [l.get_label() for l in lines])


plt.figure("PID Altitude", figsize=figure_size)
ax = plt.gca()
p1, = ax.plot(data["t"], data["pid.alt.tgt"], color="red", label="Target")
p2, = ax.plot(data["t"], data["y"], color="green", label="Altitude")
ax.set_xlim(x_limits)
ax.set_ylim(y_limits)
ax.set_ylabel("Altitude (m)")
ax.set_title("Altitude PID vs Time")
ax2 = ax.twinx()
p3, = ax2.plot(data["t"], data["pid.alt.clamp"], color="blue", label="Output")
ax2.set_ylabel("Output")
ax2.yaxis.label.set_color(p3.get_color())
ax2.spines["right"].set_color(p3.get_color())
ax2.tick_params(axis="y", colors=p3.get_color())
plt.sca(ax)
setup_plot()
lines = [p1, p2, p3]
ax.legend(lines, [l.get_label() for l in lines])


plt.figure("PID Pitch", figsize=figure_size)
ax = plt.gca()
p1, = ax.plot(data["t"], data["pid.pitch.tgt"], color="red", label="Target")
p2, = ax.plot(data["t"], data["pitch"], color="green", label="Pitch")
ax.set_xlim(x_limits)
ax.set_ylim(y_limits)
ax.set_ylabel("Pitch (rad)")
ax.set_title("Pitch PID vs Time")
ax2 = ax.twinx()
p3, = ax2.plot(data["t"], data["pid.pitch.clamp"], color="blue", label="Output")
ax2.set_ylabel("Output")
ax2.yaxis.label.set_color(p3.get_color())
ax2.spines["right"].set_color(p3.get_color())
ax2.tick_params(axis="y", colors=p3.get_color())
plt.sca(ax)
setup_plot()
lines = [p1, p2, p3]
ax.legend(lines, [l.get_label() for l in lines])


plt.figure("PID Roll", figsize=figure_size)
ax = plt.gca()
p1, = ax.plot(data["t"], -data["pid.roll.tgt"], color="red", label="Target")
p2, = ax.plot(data["t"], data["roll"], color="green", label="Roll")
ax.set_xlim(x_limits)
ax.set_ylim(y_limits)
ax.set_ylabel("Roll (rad)")
ax.set_title("Roll PID vs Time")
ax2 = ax.twinx()
p3, = ax2.plot(data["t"], -data["pid.roll.clamp"], color="blue", label="Output")
ax2.set_ylabel("Output")
ax2.yaxis.label.set_color(p3.get_color())
ax2.spines["right"].set_color(p3.get_color())
ax2.tick_params(axis="y", colors=p3.get_color())
plt.sca(ax)
setup_plot()
lines = [p1, p2, p3]
ax.legend(lines, [l.get_label() for l in lines])


plt.figure("PID Yaw", figsize=figure_size)
ax = plt.gca()
p1, = ax.plot(data["t"], data["pid.yaw.tgt"], color="red", label="Target")
p2, = ax.plot(data["t"], data["yaw"], color="green", label="Yaw")
ax.set_xlim(x_limits)
ax.set_ylim(ymin=-3.15, ymax=3.15)
ax.set_ylabel("Yaw (rad)")
ax.set_title("Yaw PID vs Time")
ax2 = ax.twinx()
p3, = ax2.plot(data["t"], data["pid.yaw.clamp"], color="blue", label="Output")
ax2.set_ylabel("Output")
ax2.yaxis.label.set_color(p3.get_color())
ax2.spines["right"].set_color(p3.get_color())
ax2.tick_params(axis="y", colors=p3.get_color())
plt.sca(ax)
setup_plot()
lines = [p1, p2, p3]
ax.legend(lines, [l.get_label() for l in lines])


plt.figure("PID Forward Speed", figsize=figure_size)
ax = plt.gca()
p1, = ax.plot(data["t"], data["pid.fwdspeed.tgt"], color="red", label="Target")
p2, = ax.plot(data["t"], data["vz_loc"], color="green", label="Forward Speed")
ax.set_xlim(x_limits)
ax.set_ylim(y_limits)
ax.set_ylabel("Speed (m/s)")
ax.set_title("Forward Speed PID vs Time")
ax2 = ax.twinx()
p3, = ax2.plot(data["t"], data["pid.fwdspeed.clamp"], color="blue", label="Output")
ax2.set_ylabel("Output")
ax2.yaxis.label.set_color(p3.get_color())
ax2.spines["right"].set_color(p3.get_color())
ax2.tick_params(axis="y", colors=p3.get_color())
plt.sca(ax)
setup_plot()
lines = [p1, p2, p3]
ax.legend(lines, [l.get_label() for l in lines])


plt.figure("PID Lateral Speed", figsize=figure_size)
ax = plt.gca()
p1, = ax.plot(data["t"], data["pid.latspeed.tgt"], color="red", label="Target")
p2, = ax.plot(data["t"], data["vx_loc"], color="green", label="Lateral Speed")
ax.set_xlim(x_limits)
ax.set_ylim(y_limits)
ax.set_ylabel("Speed (m/s)")
ax.set_title("Lateral Speed PID vs Time")
ax2 = ax.twinx()
p3, = ax2.plot(data["t"], data["pid.latspeed.clamp"], color="blue", label="Output")
ax2.set_ylabel("Output")
ax2.yaxis.label.set_color(p3.get_color())
ax2.spines["right"].set_color(p3.get_color())
ax2.tick_params(axis="y", colors=p3.get_color())
plt.sca(ax)
setup_plot()
lines = [p1, p2, p3]
ax.legend(lines, [l.get_label() for l in lines])


plt.figure("PID Yaw Speed", figsize=figure_size)
ax = plt.gca()
p1, = ax.plot(data["t"], data["pid.yawspeed.tgt"], color="red", label="Target")
p2, = ax.plot(data["t"], data["yaw_speed"], color="green", label="Yaw Speed")
ax.set_xlim(x_limits)
ax.set_ylim(y_limits)
ax.set_ylabel("Speed (rad/s)")
ax.set_title("Yaw Speed PID vs Time")
ax2 = ax.twinx()
p3, = ax2.plot(data["t"], data["pid.yawspeed.clamp"], color="blue", label="Output")
ax2.set_ylabel("Output")
ax2.yaxis.label.set_color(p3.get_color())
ax2.spines["right"].set_color(p3.get_color())
ax2.tick_params(axis="y", colors=p3.get_color())
plt.sca(ax)
setup_plot()
lines = [p1, p2, p3]
ax.legend(lines, [l.get_label() for l in lines])


plt.figure("PID Pitch Speed", figsize=figure_size)
ax = plt.gca()
p1, = ax.plot(data["t"], data["pid.pitchspeed.tgt"], color="red", label="Target")
p2, = ax.plot(data["t"], data["pitch_speed"], color="green", label="Pitch Speed")
ax.set_xlim(x_limits)
ax.set_ylim(y_limits)
ax.set_ylabel("Speed (rad/s)")
ax.set_title("Pitch Speed PID vs Time")
ax2 = ax.twinx()
p3, = ax2.plot(data["t"], data["pid.pitchspeed.clamp"], color="blue", label="Output")
ax2.set_ylabel("Output")
ax2.yaxis.label.set_color(p3.get_color())
ax2.spines["right"].set_color(p3.get_color())
ax2.tick_params(axis="y", colors=p3.get_color())
plt.sca(ax)
setup_plot()
lines = [p1, p2, p3]
ax.legend(lines, [l.get_label() for l in lines])


plt.figure("PID Roll Speed", figsize=figure_size)
ax = plt.gca()
p1, = ax.plot(data["t"], -data["pid.rollspeed.tgt"], color="red", label="Target")
p2, = ax.plot(data["t"], data["roll_speed"], color="green", label="Roll Speed")
ax.set_xlim(x_limits)
ax.set_ylim(y_limits)
ax.set_ylabel("Speed (rad/s)")
ax.set_title("Roll Speed PID vs Time")
ax2 = ax.twinx()
p3, = ax2.plot(data["t"], -data["pid.rollspeed.clamp"], color="blue", label="Output")
ax2.set_ylabel("Output")
ax2.yaxis.label.set_color(p3.get_color())
ax2.spines["right"].set_color(p3.get_color())
ax2.tick_params(axis="y", colors=p3.get_color())
plt.sca(ax)
setup_plot()
lines = [p1, p2, p3]
ax.legend(lines, [l.get_label() for l in lines])


plt.figure("PID Vertical Speed", figsize=figure_size)
ax = plt.gca()
p1, = ax.plot(data["t"], data["pid.vrtspeed.tgt"], color="red", label="Target")
p2, = ax.plot(data["t"], data["vy"], color="green", label="Vertical Speed")
ax.set_xlim(x_limits)
ax.set_ylim(y_limits)
ax.set_ylabel("Speed (m/s)")
ax.set_title("Vertical Speed PID vs Time")
ax2 = ax.twinx()
p3, = ax2.plot(data["t"], data["pid.vrtspeed.clamp"], color="blue", label="Output")
ax2.set_ylabel("Output")
ax2.yaxis.label.set_color(p3.get_color())
ax2.spines["right"].set_color(p3.get_color())
ax2.tick_params(axis="y", colors=p3.get_color())
plt.sca(ax)
setup_plot()
lines = [p1, p2, p3]
ax.legend(lines, [l.get_label() for l in lines])


plt.figure("PID X Position", figsize=figure_size)
ax = plt.gca()
p1, = ax.plot(data["t"], data["pid.posx.tgt"], color="red", label="Target")
p2, = ax.plot(data["t"], data["x"], color="green", label="X Position")
ax.set_xlim(x_limits)
ax.set_ylim(y_limits)
ax.set_ylabel("X Position (m)")
ax.set_title("X Position PID vs Time")
ax2 = ax.twinx()
p3, = ax2.plot(data["t"], data["pid.posx.clamp"], color="blue", label="Output")
ax2.set_ylabel("Output")
ax2.yaxis.label.set_color(p3.get_color())
ax2.spines["right"].set_color(p3.get_color())
ax2.tick_params(axis="y", colors=p3.get_color())
plt.sca(ax)
setup_plot()
lines = [p1, p2, p3]
ax.legend(lines, [l.get_label() for l in lines])


plt.figure("PID Z Position", figsize=figure_size)
ax = plt.gca()
p1, = ax.plot(data["t"], data["pid.posz.tgt"], color="red", label="Target")
p2, = ax.plot(data["t"], data["z"], color="green", label="Z Position")
ax.set_xlim(x_limits)
ax.set_ylim(y_limits)
ax.set_ylabel("Z Position (m)")
ax.set_title("Z Position PID vs Time")
ax2 = ax.twinx()
p3, = ax2.plot(data["t"], data["pid.posz.clamp"], color="blue", label="Output")
ax2.set_ylabel("Output")
ax2.yaxis.label.set_color(p3.get_color())
ax2.spines["right"].set_color(p3.get_color())
ax2.tick_params(axis="y", colors=p3.get_color())
plt.sca(ax)
setup_plot()
lines = [p1, p2, p3]
ax.legend(lines, [l.get_label() for l in lines])


# plt.figure("PID Lateral Position", figsize=figure_size)
# ax = plt.gca()
# p1, = ax.plot(data["t"], data["pid.posx.tgt"], color="red", label="Target")
# p2, = ax.plot(data["t"], data["delta_posx"], color="green", label="Delta_X")
# ax.set_xlim(x_limits)
# ax.set_ylim(y_limits)
# ax.set_ylabel("Offset (m)")
# ax.set_title("Lateral Position PID vs Time")
# ax2 = ax.twinx()
# p3, = ax2.plot(data["t"], data["pid.posx.clamp"], color="blue", label="Output")
# ax2.set_ylabel("Output")
# ax2.yaxis.label.set_color(p3.get_color())
# ax2.spines["right"].set_color(p3.get_color())
# ax2.tick_params(axis="y", colors=p3.get_color())
# plt.sca(ax)
# setup_plot()
# lines = [p1, p2, p3]
# ax.legend(lines, [l.get_label() for l in lines])


# plt.figure("PID Longitudinal Position", figsize=figure_size)
# ax = plt.gca()
# p1, = ax.plot(data["t"], data["pid.posz.tgt"], color="red", label="Target")
# p2, = ax.plot(data["t"], data["delta_posz"], color="green", label="Delta_Z")
# ax.set_xlim(x_limits)
# ax.set_ylim(y_limits)
# ax.set_ylabel("Offset (m)")
# ax.set_title("Longitudindal Position PID vs Time")
# ax2 = ax.twinx()
# p3, = ax2.plot(data["t"], data["pid.posz.clamp"], color="blue", label="Output")
# ax2.set_ylabel("Output")
# ax2.yaxis.label.set_color(p3.get_color())
# ax2.spines["right"].set_color(p3.get_color())
# ax2.tick_params(axis="y", colors=p3.get_color())
# plt.sca(ax)
# setup_plot()
# lines = [p1, p2, p3]
# ax.legend(lines, [l.get_label() for l in lines])


#plt.figure("PID Propellers", figsize=figure_size)
#ax = plt.gca()
#ax.set_xlim(left=0, right=20)
#ax.set_ylim(ymin=0, ymax=30)


plt.figure("PID Launch Control", figsize=figure_size)
ax = plt.gca()
p1, = ax.plot(data["t"], data["pid.launch.tgt"], color="red", label="Target")
p2, = ax.plot(data["t"], data["pitch"], color="green", label="Z Position")
ax.set_xlim(x_limits)
ax.set_ylim(y_limits)
ax.set_ylabel("Pitch angle (rad)")
ax.set_title("Launch control PID vs Time")
ax2 = ax.twinx()
p3, = ax2.plot(data["t"], data["pid.launch.clamp"], color="blue", label="Output")
ax2.set_ylabel("Output")
ax2.yaxis.label.set_color(p3.get_color())
ax2.spines["right"].set_color(p3.get_color())
ax2.tick_params(axis="y", colors=p3.get_color())
plt.sca(ax)
setup_plot()
lines = [p1, p2, p3]
ax.legend(lines, [l.get_label() for l in lines])


from mpl_toolkits.mplot3d import Axes3D
fig = plt.figure("3D Path", figsize=[1.5*figure_size[0], 1.5*figure_size[1]])
ax = fig.add_subplot(111, projection="3d")
ax.scatter(data["x"], data["z"], data["y"], c=data["t"], cmap="plasma", label="3D Path", marker=".")
ax.set_title("Flight Path")
ax.set_xlabel("X (m)")
ax.set_ylabel("Z (m)")
ax.set_zlabel("Y (m)")
ax.minorticks_on()
ax.grid(which="major")
ax.grid(which="minor", alpha=0.2)
x1, x2 = min(data["x"]), max(data["x"])
y1, y2 = min(data["y"]), max(data["y"])
z1, z2 = min(data["z"]), max(data["z"])
x0, y0, z0 = (x1 + x2) / 2, (y1 + y2) / 2, (z1 + z2) / 2
max_range = max([x2 - x1, y2 - y1, z2 - z1]) / 2
ax.set_xlim(x0 - max_range, x0 + max_range)
ax.set_ylim(z0 + max_range, z0 - max_range)
ax.set_zlim(y0 - max_range, y0 + max_range)


#plt.figure("Propeller Comp", figsize=[figure_size[0], 2 * figure_size[1]])
#ax = plt.subplot(211)
#ax.plot(data["t"], data["rpm1"], color="red", label="Propeller 1")
#ax.plot(data["t"], data["rpm2"], color="green", label="Propeller 2")
#ax.plot(data["t"], data["rpm3"], color="blue", label="Propeller 3")
#ax.plot(data["t"], data["rpm4"], color="gold", label="Propeller 4")
#ax.set_xlim(x_limits)
#ax.set_ylim(y_limits)
#ax.set_ylabel("Propeller speed (RPM)")
#ax.set_title("Propeller Speed vs Time")
#setup_plot()
#
#ax = plt.subplot(212)
#ax.plot(data["t"], data["thrust1"], color="red", label="Propeller 1")
#ax.plot(data["t"], data["thrust2"], color="green", label="Propeller 2")
#ax.plot(data["t"], data["thrust3"], color="blue", label="Propeller 3")
#ax.plot(data["t"], data["thrust4"], color="gold", label="Propeller 4")
#ax.set_xlim(x_limits)
#ax.set_ylim(y_limits)
#ax.set_ylabel("Propeller thrust (N)")
#ax.set_title("Propeller Thrust vs Time")
#setup_plot()
